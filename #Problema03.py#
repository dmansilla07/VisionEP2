import cv2
import numpy as np
import siamxt
from matplotlib import pyplot as plt

dx = [1, 1, -1, -1, 0, 1, 0, -1]
dy = [1, -1, 1, -1, 1, 0, -1, 0]

def valid(i, j, rows, cols):
    if (i>=0 and j>=0 and i<rows and j<cols):
        return 1
    else:
        return 0

def computeMinimumRegionais(img):
    rows, cols = img.shape
    for i in range(0, rows):
        for j in range(0, cols):
            for r in range(0, 8):
                u = i + dx[r]
                v = j + dy[r]
                val = 1
                if (valid(u, v, rows, cols) == 1):
                    if (img[u][v] < img[i][j]):
                        val = 0
                if (val == 1):
                    img[i][j] = 0
    return img

img = cv2.imread('knee.pgm', 0)
img_max = img.max()
neg_img = img_max - img

kernel = np.ones((3, 3), np.uint8)
kernel[0][0] = kernel[2][0] = 0
kernel[1][1] = kernel[0][2] = kernel[2][2] = 0

gradient = cv2.morphologyEx(img, cv2.MORPH_GRADIENT, kernel)

Bc = np.ones((3,3),dtype = bool)

mxt = siamxt.MaxTreeAlpha(img, Bc)

V = mxt.computeVolume()
Vext = mxt.computeExtinctionValues(V, "volume")
mxt.extinctionFilter(Vext, 8)

img_filtered = mxt.getImage()
img_filtered = computeMinimumRegionais(img_filtered)

mmgraphviz(mxt.generateCCGraph(parent_scale = True))

plt.subplot(121),plt.imshow(img, cmap = 'gray')
plt.title('Input Image'), plt.xticks([]), plt.yticks([])
plt.subplot(122),plt.imshow(img_filtered,  cmap = 'gray')
plt.title('Gradient'), plt.xticks([]), plt.yticks([])
plt.show()
